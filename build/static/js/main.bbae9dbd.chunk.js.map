{"version":3,"sources":["project.js","todo.js","App.js","index.js"],"names":["Project","props","changeSelectedProject","e","selectedProjectHandler","target","value","deleteClicked","a","onDelete","Object","keys","state","projects","class","length","k","alertClass","inputField","setState","id","handleSubmit","preventDefault","addProject","projectName","list","selectedProject","className","onChange","this","map","project","onClick","type","warningAlertClass","role","aria-label","handleAlertClose","aria-hidden","onSubmit","for","name","placeholder","required","Component","todo","array","newTitle","newTags","addTodo","showCompletedTodo","checked","children","App","handleDeleteProject","console","log","handleProjectInput","handleTodoInput","values","obj","Date","now","title","tags","completed","push","handleDeleteTodo","spliceIndex","idTobeDeleted","parentNode","getAttribute","toDoList","some","index","splice","handleTodoCompletedChange","parentElement","checkedOrNot","val","handleShowCompleted","bool","showCompletedProjects","projectsToBeShown","result","filter","openUpdateForm","idTobeUpdated","titleToUpdate","tagsToUpdate","handleUpdateInput","handleUpdateSubmit","d","currentDate","getDate","getMonth","getFullYear","tabindex","data-dismiss","data-toggle","data-target","arr","split","tag","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAqHeA,E,kDAlHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,sBAAwB,SAACC,GACvB,EAAKF,MAAMG,uBAAuBD,EAAEE,OAAOC,QAX1B,EAcnBC,cAdmB,sBAcH,sBAAAC,EAAA,sDACd,EAAKP,MAAMQ,WACX,EAAKR,MAAMG,uBAAuBM,OAAOC,KAAK,EAAKC,MAAMC,UAAU,IAFrD,2CAdG,EAmBnBC,MAAQ,WACN,GAAI,EAAKF,MAAMC,SAASE,OAAS,EAAG,CAClC,IAAIC,EAAI,EAAKC,WAEb,OADAD,GAAQ,SAGR,IAAIA,EAAI,EAAKC,WAEb,OADAD,GAAQ,QA1BO,EA+BnBE,WAAa,SAACf,GACZ,EAAKgB,SAAL,eACGhB,EAAEE,OAAOe,GAAKjB,EAAEE,OAAOC,SAjCT,EAqCnBe,aArCmB,uCAqCJ,WAAOlB,GAAP,SAAAK,EAAA,6DACbL,EAAEmB,iBADW,SAEP,EAAKrB,MAAMsB,WAAW,EAAKX,MAAMY,aAF1B,OAGb,EAAKL,SAAS,CACZK,YAAa,KAJF,2CArCI,sDAGjB,EAAKZ,MAAQ,CACXC,SAAU,EAAKZ,MAAMwB,KACrBC,gBAAiB,EAAKzB,MAAMyB,gBAC5BF,YAAa,IANE,E,qDA8CjB,OACE,yBAAKG,UAAU,YACb,mDACA,yBAAKb,MAAM,kCACT,4BACEA,MAAM,gBACNM,GAAG,WACHQ,SAAUC,KAAK3B,uBAEdQ,OAAOC,KAAKkB,KAAKjB,MAAMC,UAAUiB,KAAI,SAACC,GAAD,OACpC,4BAAQX,GAAIW,EAASzB,MAAOyB,GACzBA,OAIP,yBAAKjB,MAAM,sBACT,4BACEkB,QAASH,KAAKtB,cACdO,MAAM,yBACNmB,KAAK,UAHP,oBASJ,yBAAKN,UAAWE,KAAK5B,MAAMiC,kBAAmBd,GAAG,UAAUe,KAAK,SAC9D,6CADF,mDAGE,4BACEF,KAAK,SACLnB,MAAM,QACNsB,aAAW,QACXJ,QAASH,KAAK5B,MAAMoC,kBAEpB,0BAAMC,cAAY,QAAlB,UAGJ,0BACEC,SAAUV,KAAKR,aACfP,MAAM,qBACNM,GAAG,eAEH,yBAAKN,MAAM,cACT,wBAAI0B,IAAI,WAAR,qCACA,2BACEP,KAAK,OACLQ,KAAK,UACLrB,GAAG,cACHd,MAAOuB,KAAKjB,MAAMY,YAClBV,MAAM,oBACN4B,YAAY,eACZd,SAAUC,KAAKX,WACfyB,UAAQ,IAEV,yBAAK7B,MAAM,cACT,2BACEmB,KAAK,SACL3B,MAAM,cACNQ,MAAM,2C,GAzGA8B,aCmFPC,E,kDAlFb,WAAY5C,GAAQ,IAAD,8BACjB,cAAMA,IAQRoB,aAAe,SAAClB,GACdA,EAAEmB,iBACF,IAAIwB,EAAQ,CAAC,EAAKlC,MAAMmC,SAAU,EAAKnC,MAAMoC,SAC7C,EAAK/C,MAAMgD,QAAQH,GACnB,EAAK3B,SAAS,CACZ4B,SAAU,GACVC,QAAS,MAZX,EAAKpC,MAAQ,CACXmC,SAAU,GACVC,QAAS,IALM,E,qDAmBT,IAAD,OACP,OACE,yBAAKrB,UAAU,YACb,yBAAKb,MAAM,kBACT,yBAAKA,MAAM,qBACT,wBAAIA,MAAM,eAAV,sCACA,0BAAMyB,SAAUV,KAAKR,aAAcD,GAAG,aAAaN,MAAM,IACvD,yBAAKA,MAAM,cACT,2BACEmB,KAAK,OACLb,GAAG,aACHN,MAAM,oBACN4B,YAAY,QACZpC,MAAOuB,KAAKjB,MAAMmC,SAClBnB,SAAU,SAACzB,GAAD,OAAO,EAAKgB,SAAS,CAAE4B,SAAU5C,EAAEE,OAAOC,SACpDqC,UAAQ,IAEV,8BACEF,KAAK,OACLrB,GAAG,YACHd,MAAOuB,KAAKjB,MAAMoC,QAClBlC,MAAM,eACN4B,YAAY,8BACZd,SAAU,SAACzB,GAAD,OAAO,EAAKgB,SAAS,CAAE6B,QAAS7C,EAAEE,OAAOC,SACnDqC,UAAQ,KAGZ,yBAAK7B,MAAM,yBACT,2BACEmB,KAAK,QACLnB,MAAM,uCAER,2BACEmB,KAAK,SACL3B,MAAM,MACNQ,MAAM,kDAKd,yBAAKA,MAAM,yBACT,wEACA,yBAAKA,MAAM,mDACT,oDACA,2BACEA,MAAM,4BACNmB,KAAK,WACLQ,KAAK,WACLb,SAAU,SAACzB,GAAD,OAAO,EAAKF,MAAMiD,kBAAkB/C,EAAEE,OAAO8C,cAI7D,yBAAKrC,MAAM,aACT,yBAAKM,GAAG,WAAWN,MAAM,aACtBe,KAAK5B,MAAMmD,iB,GA1EPR,aCsUJS,G,wDAlUb,WAAYpD,GAAQ,IAAD,8BACjB,cAAMA,IAqBRqD,oBAAsB,WAChB5C,OAAOC,KAAK,EAAKC,MAAMC,UAAUE,OAAS,UACrC,EAAKH,MAAMC,SAAS,EAAKD,MAAMc,iBACtC,EAAKP,SACH,CACEN,SAAU,EAAKD,MAAMC,WAEvB,kBAAM0C,QAAQC,IAAI,EAAK5C,MAAMC,cAG/B,EAAKM,SAAS,CACZF,WAAY,qDAjCC,EAsCnBwC,mBAAqB,SAACnD,GACb,eAAQ,EAAKM,MAAMC,UACtBP,GAAS,GACb,EAAKM,MAAMC,SAASP,GAAS,GAE7B,EAAKa,SACH,CACEN,SAAU,EAAKD,MAAMC,SACrBI,WAAY,sDAEd,kBAAMsC,QAAQC,IAAI,EAAK5C,MAAMC,cAhDd,EAoDnB6C,gBAAkB,SAACC,GACjB,IAAIC,EAAM,CACRxC,GAAIyC,KAAKC,MACTC,MAAOJ,EAAO,GACdK,KAAML,EAAO,GACbM,WAAW,GAEb,EAAKrD,MAAMC,SAAS,EAAKD,MAAMc,iBAAiBwC,KAAKN,GACrD,EAAKzC,SACH,CACEN,SAAU,EAAKD,MAAMC,WAEvB,kBAAM0C,QAAQC,IAAI,EAAK5C,MAAMC,cAhEd,EAoEnBsD,iBAAmB,SAAChE,GAClB,IAEIiE,EAFAC,EAAgBlE,EAAEE,OAAOiE,WAAWC,aAAa,MACjDC,EAAQ,YAAO,EAAK5D,MAAMC,SAAS,EAAKD,MAAMc,kBAElD8C,EAASC,MAAK,SAAC5B,EAAM6B,GACnB,GAAI7B,EAAKzB,MAAQiD,EAEf,OADAD,EAAcM,GACP,KAGXF,EAASG,OAAOP,EAAa,GAG7B,EAAKxD,MAAMC,SAAS,EAAKD,MAAMc,iBAAmB8C,EAClD,EAAKrD,SAAS,CACZN,SAAU,EAAKD,MAAMC,YAnFN,EAuFnB+D,0BAA4B,SAACzE,GAC3B,IAAIqE,EAAQ,YAAO,EAAK5D,MAAMC,SAAS,EAAKD,MAAMc,kBAClD8C,EAASC,MAAK,SAAC5B,EAAM6B,GACf7B,EAAKzB,MAAQjB,EAAEE,OAAOwE,cAAcN,aAAa,QACnDhB,QAAQC,IAAIrD,EAAEE,OAAO8C,SACjBhD,EAAEE,OAAO8C,SACXN,EAAKoB,WAAY,EACjB9D,EAAEE,OAAO8C,SAAU,IAEnBhD,EAAEE,OAAO8C,SAAU,EACnBN,EAAKoB,WAAY,OAIvB,EAAKrD,MAAMC,SAAS,EAAKD,MAAMc,iBAAmB8C,EAClD,EAAKrD,SAAS,CACZN,SAAU,EAAKD,MAAMC,YAvGN,EA2GnBiE,aAAe,SAACC,GACd,OAAIA,EAEA,2BACEjE,MAAM,wBACNmB,KAAK,WACLQ,KAAK,WACLb,SAAU,EAAKgD,0BACfzB,QAAQ,YAKV,2BACErC,MAAM,wBACNmB,KAAK,WACLQ,KAAK,WACLb,SAAU,EAAKgD,6BA5HJ,EAkInBI,oBAAsB,SAACD,GACrB,IAAIE,EAEFA,IADEF,EAKJ,EAAK5D,SAAS,CACZ+D,sBAAuBD,KA1IR,EA8InBE,kBAAoB,WAClB,IAAIC,EAOJ,OALEA,EADE,EAAKxE,MAAMsE,sBACJ,EAAKtE,MAAMC,SAAS,EAAKD,MAAMc,iBAAiB2D,QACvD,SAACxC,GAAD,OAAUA,EAAKoB,aAEL,EAAKrD,MAAMC,SAAS,EAAKD,MAAMc,iBAC7C6B,QAAQC,IAAI4B,GACLA,GAtJU,EAyJnBE,eAAiB,SAACnF,GACJ,YAAO,EAAKS,MAAMC,SAAS,EAAKD,MAAMc,kBACzC+C,MAAK,SAAC5B,EAAM6B,GACnB,GAAI7B,EAAKzB,MAAQjB,EAAEE,OAAOiE,WAAWC,aAAa,MAMhD,OALA,EAAKpD,SAAS,CACZoE,cAAepF,EAAEE,OAAOiE,WAAWC,aAAa,MAChDiB,cAAe3C,EAAKkB,MACpB0B,aAAc5C,EAAKmB,QAEd,MAlKM,EAuKnB0B,kBAAoB,SAACvF,GACnBoD,QAAQC,IAAIrD,EAAEE,OAAOe,IACrB,EAAKD,SAAL,eACGhB,EAAEE,OAAOe,GAAKjB,EAAEE,OAAOC,SA1KT,EA8KnBqF,mBAAqB,WACnB,IAAInB,EAAQ,YAAO,EAAK5D,MAAMC,SAAS,EAAKD,MAAMc,kBAClD8C,EAASC,MAAK,SAAC5B,EAAM6B,GACnB,GAAI7B,EAAKzB,MAAQ,EAAKR,MAAM2E,cAG1B,OAFA1C,EAAKkB,MAAQ,EAAKnD,MAAM4E,cACxB3C,EAAKmB,KAAO,EAAKpD,MAAM6E,cAChB,KAKX,EAAK7E,MAAMC,SAAS,EAAKD,MAAMc,iBAAmB8C,EAClD,EAAKrD,SAAS,CACZN,SAAU,EAAKD,MAAMC,YAzLvB,EAAKD,MAAQ,CACXC,SAAU,CACR,cAAe,CACb,CACEO,GAAI,KACJ2C,MAAO,UACPC,KAAM,sBACNC,WAAW,KAIjBvC,gBAAiB,cACjBT,WAAY,oDACZiE,uBAAuB,EACvBK,cAAe,GACfC,cAAe,GACfC,aAAc,IAlBC,E,qDA8LT,IAAD,OACHG,EAAI,IAAI/B,KACRgC,EACGD,EAAEE,UAAY,KAAOF,EAAEG,WAAa,GAAK,IAAMH,EAAEI,cACxD,OACE,yBAAKrE,UAAU,aACb,yBAAKb,MAAM,aAAaM,GAAG,UAAU6E,SAAS,KAAK9D,KAAK,UACtD,yBAAKrB,MAAM,eAAeqB,KAAK,YAC7B,yBAAKrB,MAAM,iBACT,yBAAKA,MAAM,gBACT,wBAAIA,MAAM,cAAcM,GAAG,qBAA3B,eAGA,4BACEa,KAAK,SACLnB,MAAM,QACNoF,eAAa,QACb9D,aAAW,SAEX,0BAAME,cAAY,QAAlB,UAGJ,yBAAKxB,MAAM,cACT,8BACE,yBAAKA,MAAM,cACT,2BAAO0B,IAAI,iBAAiB1B,MAAM,kBAAlC,UAGA,2BACEmB,KAAK,OACLb,GAAG,gBACHd,MAAOuB,KAAKjB,MAAM4E,cAClB5D,SAAUC,KAAK6D,kBACf5E,MAAM,kBAGV,yBAAKA,MAAM,cACT,2BAAO0B,IAAI,eAAe1B,MAAM,kBAAhC,SAGA,8BACEM,GAAG,eACHd,MAAOuB,KAAKjB,MAAM6E,aAClB7D,SAAUC,KAAK6D,kBACf5E,MAAM,oBAKd,yBAAKA,MAAM,gBACT,4BACEmB,KAAK,SACLnB,MAAM,oBACNoF,eAAa,SAHf,SAOA,4BACEjE,KAAK,SACLnB,MAAM,kBACNM,GAAG,gBACH+E,cAAY,QACZC,cAAY,WACZpE,QAASH,KAAK8D,oBANhB,oBAcR,yBAAKhE,UAAU,OACb,kBAAC,EAAD,CACEF,KAAMI,KAAKjB,MAAMC,SACjBa,gBAAiBG,KAAKjB,MAAMc,gBAC5BjB,SAAUoB,KAAKyB,oBACf/B,WAAY,SAACjB,GAAD,OAAW,EAAKmD,mBAAmBnD,IAC/CF,uBAAwB,SAACE,GAAD,OACtB,EAAKa,SAAS,CAAEO,gBAAiBpB,KAEnC4B,kBAAmBL,KAAKjB,MAAMK,WAC9BoB,iBAAkB,kBAChB,EAAKlB,SAAS,CACZF,WAAY,yDAIlB,kBAAC,EAAD,CACEgC,QAAS,SAACoD,GAAD,OAAS,EAAK3C,gBAAgB2C,IACvCnD,kBAAmBrB,KAAKmD,qBAEvBnD,KAAKsD,oBAAoBrD,KAAI,SAACe,GAC7B,OACE,yBAAK/B,MAAM,iCACT,yBAAKA,MAAM,kCACT,8BAAO+B,EAAKkB,OACZ,yBAAK3C,GAAIyB,EAAKzB,GAAIN,MAAM,oBACtB,4BACEA,MAAM,+CACNqF,cAAY,QACZC,cAAY,WACZpE,QAAS,EAAKsD,gBAJhB,UAQA,4BACEtD,QAAS,EAAKmC,iBACdrD,MAAM,+CAFR,KAMC,EAAKgE,aAAajC,EAAKoB,aAG5B,yBAAKnD,MAAM,uCACT,yBAAKA,MAAM,IACR+B,EAAKmB,KAAKsC,MAAM,KAAKxE,KAAI,SAACyE,GAAD,OACxB,0BAAMzF,MAAM,6BAA6ByF,OAG7C,yBAAKzF,MAAM,IAAI+E,e,GAvTjBjD,c,YCClB4D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,wBAAI/E,UAAU,eAAd,YACA,kBAAC,EAAD,OAEFgF,SAASC,eAAe,W","file":"static/js/main.bbae9dbd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Project extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      projects: this.props.list,\n      selectedProject: this.props.selectedProject,\n      projectName: \"\",\n    };\n  }\n\n  changeSelectedProject = (e) => {\n    this.props.selectedProjectHandler(e.target.value);\n  };\n\n  deleteClicked = async () => {\n    this.props.onDelete();\n    this.props.selectedProjectHandler(Object.keys(this.state.projects)[0]);\n  };\n\n  class = () => {\n    if (this.state.projects.length > 1) {\n      let k = this.alertClass;\n      k = k + \"d-none\";\n      return k;\n    } else {\n      let k = this.alertClass;\n      k = k + \"show\";\n      return k;\n    }\n  };\n\n  inputField = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n    await this.props.addProject(this.state.projectName);\n    this.setState({\n      projectName: \"\",\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"col-sm-5\">\n        <h2>Project's Selection</h2>\n        <div class=\"input-group col-sm-8 px-0 mb-4\">\n          <select\n            class=\"custom-select\"\n            id=\"selector\"\n            onChange={this.changeSelectedProject}\n          >\n            {Object.keys(this.state.projects).map((project) => (\n              <option id={project} value={project}>\n                {project}\n              </option>\n            ))}\n          </select>\n          <div class=\"input-group-append\">\n            <button\n              onClick={this.deleteClicked}\n              class=\"btn btn-outline-danger\"\n              type=\"button\"\n            >\n              Delete Project\n            </button>\n          </div>\n        </div>\n        <div className={this.props.warningAlertClass} id=\"warning\" role=\"alert\">\n          <strong>Warning !</strong> There should be atleast one project in the\n          list\n          <button\n            type=\"button\"\n            class=\"close\"\n            aria-label=\"Close\"\n            onClick={this.props.handleAlertClose}\n          >\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </div>\n        <form\n          onSubmit={this.handleSubmit}\n          class=\"col-sm-12 p-0 mt-4\"\n          id=\"projectForm\"\n        >\n          <div class=\"form-group\">\n            <h3 for=\"project\">Please enter a new Project here :</h3>\n            <input\n              type=\"text\"\n              name=\"project\"\n              id=\"projectName\"\n              value={this.state.projectName}\n              class=\"form-control mb-4\"\n              placeholder=\"Project Name\"\n              onChange={this.inputField}\n              required\n            />\n            <div class=\"text-right\">\n              <input\n                type=\"submit\"\n                value=\"Add Project\"\n                class=\"btn btn-outline-success btn-md\"\n              />\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Project;\n","import React, { Component } from \"react\";\n\nclass todo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      newTitle: \"\",\n      newTags: \"\",\n    };\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    let array = [this.state.newTitle, this.state.newTags];\n    this.props.addTodo(array);\n    this.setState({\n      newTitle: \"\",\n      newTags: \"\",\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"col-sm-7\">\n        <div class=\"col-sm-12 mb-5\">\n          <div class=\"my-4 p-3 form-box\">\n            <h4 class=\"text-center\">Please Enter your List Items Below</h4>\n            <form onSubmit={this.handleSubmit} id=\"item-input\" class=\"\">\n              <div class=\"form-group\">\n                <input\n                  type=\"text\"\n                  id=\"titleInput\"\n                  class=\"form-control mb-4\"\n                  placeholder=\"Title\"\n                  value={this.state.newTitle}\n                  onChange={(e) => this.setState({ newTitle: e.target.value })}\n                  required\n                />\n                <textarea\n                  name=\"tags\"\n                  id=\"tagsInput\"\n                  value={this.state.newTags}\n                  class=\"form-control\"\n                  placeholder=\"Enter Coma Separated Tags..\"\n                  onChange={(e) => this.setState({ newTags: e.target.value })}\n                  required\n                ></textarea>\n              </div>\n              <div class=\"form-group text-right\">\n                <input\n                  type=\"reset\"\n                  class=\"btn btn-outline-danger btn-sm mx-2\"\n                />\n                <input\n                  type=\"submit\"\n                  value=\"Add\"\n                  class=\"btn btn-outline-success btn-sm float-right\"\n                />\n              </div>\n            </form>\n          </div>\n          <div class=\"col-sm-12 text-center\">\n            <h2>The To Do list will populate over hear..</h2>\n            <div class=\"d-flex justify-content-center align-item-center\">\n              <h5>Show Completed Tasks</h5>\n              <input\n                class=\"check ml-2 show-completed\"\n                type=\"checkbox\"\n                name=\"checkbox\"\n                onChange={(e) => this.props.showCompletedTodo(e.target.checked)}\n              />\n            </div>\n          </div>\n          <div class=\"col-sm-12\">\n            <div id=\"toDoList\" class=\"col-sm-12\">\n              {this.props.children}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default todo;\n","import React, { Component } from \"react\";\nimport Project from \"./project\";\nimport Todo from \"./todo\";\nimport \"./app.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      projects: {\n        \"Async/Await\": [\n          {\n            id: 2343,\n            title: \"morning\",\n            tags: \"promises, callbacks\",\n            completed: false,\n          },\n        ],\n      },\n      selectedProject: \"Async/Await\",\n      alertClass: \"alert alert-warning alert-dismissible fade d-none\",\n      showCompletedProjects: false,\n      idTobeUpdated: \"\",\n      titleToUpdate: \"\",\n      tagsToUpdate: \"\",\n    };\n  }\n\n  handleDeleteProject = () => {\n    if (Object.keys(this.state.projects).length > 1) {\n      delete this.state.projects[this.state.selectedProject];\n      this.setState(\n        {\n          projects: this.state.projects,\n        },\n        () => console.log(this.state.projects)\n      );\n    } else {\n      this.setState({\n        alertClass: \"alert alert-warning alert-dismissible fade show\",\n      });\n    }\n  };\n\n  handleProjectInput = (value) => {\n    let obj = { ...this.state.projects };\n    obj[value] = [];\n    this.state.projects[value] = [];\n    // console.log(obj, this.state.projects);\n    this.setState(\n      {\n        projects: this.state.projects,\n        alertClass: \"alert alert-warning alert-dismissible fade d-none\",\n      },\n      () => console.log(this.state.projects)\n    );\n  };\n\n  handleTodoInput = (values) => {\n    let obj = {\n      id: Date.now(),\n      title: values[0],\n      tags: values[1],\n      completed: false,\n    };\n    this.state.projects[this.state.selectedProject].push(obj);\n    this.setState(\n      {\n        projects: this.state.projects,\n      },\n      () => console.log(this.state.projects)\n    );\n  };\n\n  handleDeleteTodo = (e) => {\n    let idTobeDeleted = e.target.parentNode.getAttribute(\"id\");\n    let toDoList = [...this.state.projects[this.state.selectedProject]];\n    let spliceIndex;\n    toDoList.some((todo, index) => {\n      if (todo.id === +idTobeDeleted) {\n        spliceIndex = index;\n        return true;\n      }\n    });\n    toDoList.splice(spliceIndex, 1);\n    // let newProjectsObj = { ...this.state.projects };\n    // newProjectsObj[this.state.selectedProject] = toDoList;\n    this.state.projects[this.state.selectedProject] = toDoList;\n    this.setState({\n      projects: this.state.projects,\n    });\n  };\n\n  handleTodoCompletedChange = (e) => {\n    let toDoList = [...this.state.projects[this.state.selectedProject]];\n    toDoList.some((todo, index) => {\n      if (todo.id === +e.target.parentElement.getAttribute(\"id\")) {\n        console.log(e.target.checked);\n        if (e.target.checked) {\n          todo.completed = true;\n          e.target.checked = true;\n        } else {\n          e.target.checked = false;\n          todo.completed = false;\n        }\n      }\n    });\n    this.state.projects[this.state.selectedProject] = toDoList;\n    this.setState({\n      projects: this.state.projects,\n    });\n  };\n\n  checkedOrNot = (val) => {\n    if (val) {\n      return (\n        <input\n          class=\"check ml-2 card-check\"\n          type=\"checkbox\"\n          name=\"checkbox\"\n          onChange={this.handleTodoCompletedChange}\n          checked=\"checked\"\n        />\n      );\n    } else {\n      return (\n        <input\n          class=\"check ml-2 card-check\"\n          type=\"checkbox\"\n          name=\"checkbox\"\n          onChange={this.handleTodoCompletedChange}\n        />\n      );\n    }\n  };\n\n  handleShowCompleted = (val) => {\n    let bool;\n    if (val) {\n      bool = true;\n    } else {\n      bool = false;\n    }\n    this.setState({\n      showCompletedProjects: bool,\n    });\n  };\n\n  projectsToBeShown = () => {\n    let result;\n    if (this.state.showCompletedProjects)\n      result = this.state.projects[this.state.selectedProject].filter(\n        (todo) => todo.completed\n      );\n    else result = this.state.projects[this.state.selectedProject];\n    console.log(result);\n    return result;\n  };\n\n  openUpdateForm = (e) => {\n    let toDoList = [...this.state.projects[this.state.selectedProject]];\n    toDoList.some((todo, index) => {\n      if (todo.id === +e.target.parentNode.getAttribute(\"id\")) {\n        this.setState({\n          idTobeUpdated: e.target.parentNode.getAttribute(\"id\"),\n          titleToUpdate: todo.title,\n          tagsToUpdate: todo.tags,\n        });\n        return true;\n      }\n    });\n  };\n\n  handleUpdateInput = (e) => {\n    console.log(e.target.id);\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  handleUpdateSubmit = () => {\n    let toDoList = [...this.state.projects[this.state.selectedProject]];\n    toDoList.some((todo, index) => {\n      if (todo.id === +this.state.idTobeUpdated) {\n        todo.title = this.state.titleToUpdate;\n        todo.tags = this.state.tagsToUpdate;\n        return true;\n      }\n    });\n    // let newProjectsObj = { ...this.state.projects };\n    // newProjectsObj[this.state.selectedProject] = toDoList;\n    this.state.projects[this.state.selectedProject] = toDoList;\n    this.setState({\n      projects: this.state.projects,\n    });\n  };\n  render() {\n    let d = new Date();\n    let currentDate =\n      \"\" + d.getDate() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getFullYear();\n    return (\n      <div className=\"container\">\n        <div class=\"modal fade\" id=\"myModal\" tabindex=\"-1\" role=\"dialog\">\n          <div class=\"modal-dialog\" role=\"document\">\n            <div class=\"modal-content\">\n              <div class=\"modal-header\">\n                <h5 class=\"modal-title\" id=\"exampleModalLabel\">\n                  New message\n                </h5>\n                <button\n                  type=\"button\"\n                  class=\"close\"\n                  data-dismiss=\"modal\"\n                  aria-label=\"Close\"\n                >\n                  <span aria-hidden=\"true\">&times;</span>\n                </button>\n              </div>\n              <div class=\"modal-body\">\n                <form>\n                  <div class=\"form-group\">\n                    <label for=\"recipient-name\" class=\"col-form-label\">\n                      Title:\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"titleToUpdate\"\n                      value={this.state.titleToUpdate}\n                      onChange={this.handleUpdateInput}\n                      class=\"form-control\"\n                    />\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"message-text\" class=\"col-form-label\">\n                      Tags:\n                    </label>\n                    <textarea\n                      id=\"tagsToUpdate\"\n                      value={this.state.tagsToUpdate}\n                      onChange={this.handleUpdateInput}\n                      class=\"form-control\"\n                    ></textarea>\n                  </div>\n                </form>\n              </div>\n              <div class=\"modal-footer\">\n                <button\n                  type=\"button\"\n                  class=\"btn btn-secondary\"\n                  data-dismiss=\"modal\"\n                >\n                  Close\n                </button>\n                <button\n                  type=\"button\"\n                  class=\"btn btn-primary\"\n                  id=\"update-button\"\n                  data-toggle=\"modal\"\n                  data-target=\"#myModal\"\n                  onClick={this.handleUpdateSubmit}\n                >\n                  Send message\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <Project\n            list={this.state.projects}\n            selectedProject={this.state.selectedProject}\n            onDelete={this.handleDeleteProject}\n            addProject={(value) => this.handleProjectInput(value)}\n            selectedProjectHandler={(value) =>\n              this.setState({ selectedProject: value })\n            }\n            warningAlertClass={this.state.alertClass}\n            handleAlertClose={() =>\n              this.setState({\n                alertClass: \"alert alert-warning alert-dismissible fade d-none\",\n              })\n            }\n          />\n          <Todo\n            addTodo={(arr) => this.handleTodoInput(arr)}\n            showCompletedTodo={this.handleShowCompleted}\n          >\n            {this.projectsToBeShown().map((todo) => {\n              return (\n                <div class=\"col-sm-12 mb-3 p-2 to-do-item\">\n                  <div class=\"d-flex justify-content-between\">\n                    <span>{todo.title}</span>\n                    <div id={todo.id} class=\"input-group-text\">\n                      <button\n                        class=\"btn btn-outline-info btn-sm edit-button mx-1\"\n                        data-toggle=\"modal\"\n                        data-target=\"#myModal\"\n                        onClick={this.openUpdateForm}\n                      >\n                        &#9998;\n                      </button>\n                      <button\n                        onClick={this.handleDeleteTodo}\n                        class=\"btn btn-outline-danger btn-sm delete-button\"\n                      >\n                        X\n                      </button>\n                      {this.checkedOrNot(todo.completed)}\n                    </div>\n                  </div>\n                  <div class=\"d-flex justify-content-between mt-4\">\n                    <div class=\"\">\n                      {todo.tags.split(\",\").map((tag) => (\n                        <span class=\"badge badge-info mr-2 p-2\">{tag}</span>\n                      ))}\n                    </div>\n                    <div class=\"\">{currentDate}</div>\n                  </div>\n                </div>\n              );\n            })}\n          </Todo>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <h1 className=\"text-center\">ToDo App</h1>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}